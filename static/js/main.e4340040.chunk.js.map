{"version":3,"sources":["MapChart.js","StandardMode.js","SurvivalMode.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["MapChart","setTooltipContent","guessLoc","curCityLoc","showCity","setGuessLoc","city","handleClick","projection","evt","svg","target","closest","pt","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","coords","invert","data-tip","style","maxHeight","geography","geographies","onClick","map","geo","fill","stroke","strokeWidth","default","outline","hover","pressed","rsmKey","coordinates","strokeLinecap","strokeLinejoin","transform","cx","cy","r","d","memo","StandardMode","props","loc","setState","state","content","cities","step","curCityName","curCityNum","roundOver","rounds","score","gameOver","guess","p1","Math","PI","p2","dp","dl","a","sin","cos","atan2","sqrt","floor","arr","n","result","Array","len","length","taken","RangeError","random","cList","this","getRandom","hundredkpluscities","LONGITUDE","LATITUDE","CITY","STATE_CODE","console","log","dist","round","calcDistance","roundInfo","num","cityLoc","distance","newRounds","concat","curNum","className","textDecoration","to","playAgain","nextRound","submit","setContent","React","Component","SurvivalMode","curCityID","lives","ID","success","filter","c","curCity","Home","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e4340040.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/LeoXu1/counties-with-states-topojson/main/statesTopoJson.json\";\n\nconst MapChart = ({ setTooltipContent, guessLoc, curCityLoc, showCity, city, setGuessLoc }) => {\n  const handleClick = (projection) => (evt) => {\n    const svg = evt.target.closest(\"svg\");\n\n    const pt = svg.createSVGPoint();\n    pt.x = evt.clientX;\n    pt.y = evt.clientY;\n\n    const { x, y } = pt.matrixTransform(svg.getScreenCTM().inverse());\n    const coords = projection.invert([x, y]);\n    setGuessLoc(coords);\n  };\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\"\n      style={{\n        maxHeight: \"450\"\n      }}>\n          <Geographies geography={geoUrl}>\n            {({ geographies, projection }) => {\n              return(\n                <g onClick={handleClick(projection)}>\n                {geographies.map(geo => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill=\"#ddd\"\n                    stroke=\"#aaa\"\n                    strokeWidth=\"0.5\"\n                    style={{\n                      default: { outline: \"none\" },\n                      hover: { outline: \"none\" },\n                      pressed: { outline: \"none\" },\n                    }}\n                  />\n                ))}\n                </g>\n              )\n            }}\n          </Geographies>\n          <Marker\n            coordinates={guessLoc}\n          >\n\n            <g\n              fill=\"none\"\n              stroke=\"#FF5533\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              transform=\"translate(-12, -24)\"\n            >\n              <circle cx=\"12\" cy=\"10\" r=\"3\" />\n              <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\n            </g>\n          </Marker>\n          {showCity ? (\n            <>\n              <Marker\n                coordinates={curCityLoc}\n              >\n                <circle r={3} fill=\"#0079d3\" stroke=\"#000\" strokeWidth={0.1} />\n              </Marker>\n            </>\n          ) : (\n            null\n          )}\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Link } from \"react-router-dom\";\n\n\nimport \"./App.css\";\n\nimport MapChart from \"./MapChart\";\n\nimport hundredkpluscities from \"./hundredkpluscities\"\n\nexport default class StandardMode extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      content: \"\",\n      cities: [],\n      guessLoc: [-98.6, 39.8],\n      step: 1,\n      showCity: false,\n      curCityLoc: [],\n      curCityName: \"\",\n      curCityNum: 0,\n      roundOver: false,\n      rounds: [],\n      score: 0,\n      gameOver: false\n    }\n  }\n\n  calcDistance(city, guess) {\n    const R = 6371e3; // metres\n    const p1 = city[1] * Math.PI/180; // φ, λ in radians\n    const p2 = guess[1] * Math.PI/180;\n    const dp = (guess[1]-city[1]) * Math.PI/180;\n    const dl = (guess[0]-city[0]) * Math.PI/180;\n\n    const a = Math.sin(dp/2) * Math.sin(dp/2) +\n              Math.cos(p1) * Math.cos(p2) *\n              Math.sin(dl/2) * Math.sin(dl/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    const d = R * c; // in metres\n    return Math.floor(d)/1000;\n  }\n\n  getRandom(arr, n) {\n    var result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        var x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n}\n\n  componentDidMount() {\n    let cList = this.getRandom(hundredkpluscities, 10)\n    this.setState({\n      cities: cList,\n      curCityLoc: [cList[0].LONGITUDE, cList[0].LATITUDE],\n      curCityName: cList[0].CITY + \", \" + cList[0].STATE_CODE\n    })\n    console.log(cList)\n  }\n\n  setGuessLoc = loc => {\n    this.setState({\n      guessLoc: loc\n    })\n  }\n\n  submit() {\n    let dist = Math.round(this.calcDistance(this.state.guessLoc, this.state.curCityLoc))\n    let roundInfo = {\n      num: this.state.curCityNum,\n      city: this.state.curCityName,\n      guess: this.state.guessLoc,\n      cityLoc: this.state.curCityLoc,\n      distance: dist\n    }\n    const newRounds = this.state.rounds.concat(roundInfo)\n    this.setState({\n      roundOver: true,\n      showCity: true,\n      curCityName: dist + \" km\",\n      score: this.state.score + dist,\n      rounds: newRounds\n    })\n\n  }\n\n  nextRound() {\n    if (this.state.curCityNum === 9) {\n      this.setState({\n        curCityName: \"Game over. Final distance: \"+this.state.score+ \" km\",\n        gameOver: true\n      })\n    }\n    else {\n      let curNum = this.state.curCityNum + 1\n      this.setState({\n        curCityNum: curNum,\n        curCityLoc: [this.state.cities[curNum].LONGITUDE, this.state.cities[curNum].LATITUDE],\n        curCityName: this.state.cities[curNum].CITY + \", \" + this.state.cities[curNum].STATE_CODE,\n        roundOver: false,\n        showCity: false\n      })\n    }\n  }\n\n  playAgain() {\n    let cList = this.getRandom(hundredkpluscities, 10)\n    this.setState({\n      cities: cList,\n      curCityNum: 0,\n      curCityLoc: [cList[0].LONGITUDE, cList[0].LATITUDE],\n      curCityName: cList[0].CITY + \", \" + cList[0].STATE_CODE,\n      showCity: false,\n      roundOver: false,\n      rounds: [],\n      score: 0,\n      gameOver: false\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"base\">\n        {this.state.gameOver ? (\n          <div className=\"container\">\n            <Link style={{ textDecoration: 'none' }} to=\"/cityfinder\">\n              <button>Back</button>\n            </Link>\n            <h5>Final Score: {this.state.score} km</h5>\n            <button onClick={() => this.playAgain()}>Play Again</button>\n            <div className=\"resultsList\">\n              {this.state.rounds.map(round => (\n                <div key={round.num}\n                className=\"roundEntry\"\n                onClick={() => this.setState({\n                  curCityLoc: round.cityLoc,\n                  guessLoc: round.guess,\n                })}\n                >\n                  <h5>{round.city}</h5>\n                  <h5>{round.distance} km</h5>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"container\">\n            <Link style={{ textDecoration: 'none' }} to=\"/cityfinder\">\n              <button>Back</button>\n            </Link>\n            <h3>Standard Mode</h3>\n            <p>Try to minimize your total distance over ten rounds.</p>\n            <h5>Round {this.state.curCityNum+1}: {this.state.curCityName}</h5>\n            <h5>Total distance: {this.state.score} km</h5>\n            {this.state.roundOver ? (\n              <>\n                <button onClick={() => this.nextRound()}>Next</button>\n              </>\n            ) : (\n              <>\n                <button onClick={() => this.submit()}>Submit</button>\n              </>\n            )}\n          </div>\n        )}\n        <div className=\"map\">\n          <MapChart setGuessLoc={this.setGuessLoc} showCity={this.state.showCity} curCityLoc={this.state.curCityLoc} guessLoc={this.state.guessLoc} setTooltipContent={this.setContent} />\n          <ReactTooltip>{this.state.content}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport MapChart from \"./MapChart\";\n\nimport hundredkpluscities from \"./hundredkpluscities\"\n\nexport default class SurvivalMode extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      content: \"\",\n      cities: [],\n      guessLoc: [-98.6, 39.8],\n      step: 1,\n      showCity: false,\n      curCityLoc: [],\n      curCityName: \"\",\n      curCityNum: 0,\n      curCityID: 0,\n      roundOver: false,\n      rounds: [],\n      score: 0,\n      gameOver: false,\n      lives: 5\n    }\n  }\n\n  calcDistance(city, guess) {\n    const R = 6371e3; // metres\n    const p1 = city[1] * Math.PI/180; // φ, λ in radians\n    const p2 = guess[1] * Math.PI/180;\n    const dp = (guess[1]-city[1]) * Math.PI/180;\n    const dl = (guess[0]-city[0]) * Math.PI/180;\n\n    const a = Math.sin(dp/2) * Math.sin(dp/2) +\n              Math.cos(p1) * Math.cos(p2) *\n              Math.sin(dl/2) * Math.sin(dl/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    const d = R * c; // in metres\n    return Math.floor(d)/1000;\n  }\n\n  getRandom(arr, n) {\n    var result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        var x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n}\n\n  componentDidMount() {\n    let city = hundredkpluscities[Math.floor(Math.random() * hundredkpluscities.length)];\n    this.setState({\n      cities: hundredkpluscities,\n      curCityLoc: [city.LONGITUDE, city.LATITUDE],\n      curCityName: city.CITY + \", \" + city.STATE_CODE,\n      curCityID: city.ID\n    })\n    console.log(hundredkpluscities.length)\n  }\n\n  setGuessLoc = loc => {\n    this.setState({\n      guessLoc: loc\n    })\n  }\n\n  submit() {\n    let dist = Math.round(this.calcDistance(this.state.guessLoc, this.state.curCityLoc))\n    if (dist < 50) {\n      let roundInfo = {\n        num: this.state.curCityNum,\n        city: this.state.curCityName,\n        guess: this.state.guessLoc,\n        cityLoc: this.state.curCityLoc,\n        distance: dist,\n        success: true\n      }\n      const newRounds = this.state.rounds.concat(roundInfo)\n      this.setState({\n        roundOver: true,\n        showCity: true,\n        curCityName: dist + \" km. Good job!\",\n        score: this.state.score + 1,\n        rounds: newRounds,\n        cities: this.state.cities.filter(c => c.ID !== this.state.curCityID)\n      })\n      console.log(this.state.cities.length)\n    }\n    else {\n      let roundInfo = {\n        num: this.state.curCityNum,\n        city: this.state.curCityName,\n        guess: this.state.guessLoc,\n        cityLoc: this.state.curCityLoc,\n        distance: dist,\n        success: false\n      }\n      const newRounds = this.state.rounds.concat(roundInfo)\n      this.setState({\n        roundOver: true,\n        showCity: true,\n        curCityName: dist + \" km. Too far. You lost a life.\",\n        lives: this.state.lives - 1,\n        rounds: newRounds,\n        cities: this.state.cities.filter(c => c.ID !== this.state.curCityID)\n      })\n      console.log(this.state.cities.length)\n    }\n\n  }\n\n  nextRound() {\n    if (this.state.lives === 0) {\n      this.setState({\n        curCityName: \"Game over. Final score: \"+this.state.score,\n        gameOver: true\n      })\n    }\n    else {\n      let city = this.state.cities[Math.floor(Math.random() * this.state.cities.length)];\n      this.setState({\n        curCity: city,\n        curCityLoc: [city.LONGITUDE, city.LATITUDE],\n        curCityName: city.CITY + \", \" + city.STATE_CODE,\n        curCityID: city.ID,\n        roundOver: false,\n        showCity: false\n      })\n    }\n  }\n\n  playAgain() {\n    let city = hundredkpluscities[Math.floor(Math.random() * hundredkpluscities.length)];\n    this.setState({\n      cities: hundredkpluscities,\n      curCityLoc: [city.LONGITUDE, city.LATITUDE],\n      curCityName: city.CITY + \", \" + city.STATE_CODE,\n      curCityID: city.ID,\n      showCity: false,\n      roundOver: false,\n      rounds: [],\n      score: 0,\n      lives: 5,\n      gameOver: false\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"base\">\n        {this.state.gameOver ? (\n          <div className=\"container\">\n            <Link style={{ textDecoration: 'none' }} to=\"/cityfinder\">\n              <button>Back</button>\n            </Link>\n            <h5>Final Score: {this.state.score}</h5>\n            <button onClick={() => this.playAgain()}>Play Again</button>\n            <div className=\"resultsList\">\n              {this.state.rounds.map(round => (\n                <div key={round.num}\n                className=\"roundEntry\"\n                onClick={() => this.setState({\n                  curCityLoc: round.cityLoc,\n                  guessLoc: round.guess,\n                })}\n                >\n                  <h5>{round.city}</h5>\n                  {round.success ? (\n                    <>\n                      <h5>Success - {round.distance} km</h5>\n                    </>\n                  ) : (\n                    <>\n                      <h5>Failure - {round.distance} km</h5>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"container\">\n            <Link style={{ textDecoration: 'none' }} to=\"/cityfinder\">\n              <button>Back</button>\n            </Link>\n            <h3>Survival Mode</h3>\n            <p>Try to get as far as possible with 5 lives.</p>\n            <h5>{this.state.curCityName}</h5>\n            <h5>Score: {this.state.score}</h5>\n            <h5>Lives: {this.state.lives}</h5>\n            {this.state.roundOver ? (\n              <>\n                <button onClick={() => this.nextRound()}>Next</button>\n              </>\n            ) : (\n              <>\n                <button onClick={() => this.submit()}>Submit</button>\n              </>\n            )}\n          </div>\n        )}\n        <div className=\"map\">\n          <MapChart setGuessLoc={this.setGuessLoc} showCity={this.state.showCity} curCityLoc={this.state.curCityLoc} guessLoc={this.state.guessLoc} setTooltipContent={this.setContent} />\n          <ReactTooltip>{this.state.content}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nexport default function Home() {\n  return (\n    <div>\n      <h2>City Finder</h2>\n      <ul>\n          <li>\n            <Link to=\"/cityfinder/standard\">Standard Mode</Link>\n          </li>\n          <li>\n            <Link to=\"/cityfinder/survival\">Survival Mode</Link>\n          </li>\n        </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport StandardMode from \"./StandardMode\"\nimport SurvivalMode from \"./SurvivalMode\"\nimport Home from \"./Home\"\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route exact path=\"/cityfinder\" component={Home} />\n          <Route exact path=\"/cityfinder/survival\" component={SurvivalMode} />\n          <Route path=\"/cityfinder/standard\" component={StandardMode} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
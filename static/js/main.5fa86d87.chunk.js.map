{"version":3,"sources":["MapChart.js","StandardMode.js","SurvivalMode.js","Home.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["MapChart","mode","guessLoc","setTooltipContent","curCityLoc","showCity","setGuessLoc","city","geoUrl","handleClick","projection","evt","svg","target","closest","pt","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","coords","invert","data-tip","style","maxHeight","geography","geographies","onClick","map","geo","fill","stroke","strokeWidth","default","outline","hover","pressed","rsmKey","coordinates","strokeLinecap","strokeLinejoin","transform","cx","cy","r","d","memo","StandardMode","props","loc","setState","state","content","cities","step","curCityName","curCityNum","roundOver","rounds","score","gameOver","guess","p1","Math","PI","p2","dp","dl","a","sin","cos","atan2","sqrt","floor","arr","n","result","Array","len","length","taken","RangeError","random","cList","this","getRandom","hundredkpluscities","LONGITUDE","LATITUDE","CITY","STATE_CODE","console","log","dist","round","calcDistance","endsWith","roundInfo","num","cityLoc","distance","newRounds","concat","curNum","className","textDecoration","to","playAgain","nextRound","submit","setContent","React","Component","SurvivalMode","curCityID","lives","level","levels","ID","bonusThreshold","success","filter","c","threshold","curCity","scoreNeeded","number","description","bonusAllowed","Home","Header","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5fa86d87.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker\n} from \"react-simple-maps\";\n\nconst MapChart = ({ mode, setTooltipContent, guessLoc, curCityLoc, showCity, city, setGuessLoc }) => {\n  const geoUrl =\n    \"https://raw.githubusercontent.com/LeoXu1/counties-with-states-topojson/main/\"+mode+\"TopoJson.json\";\n\n  const handleClick = (projection) => (evt) => {\n    const svg = evt.target.closest(\"svg\");\n\n    const pt = svg.createSVGPoint();\n    pt.x = evt.clientX;\n    pt.y = evt.clientY;\n\n    const { x, y } = pt.matrixTransform(svg.getScreenCTM().inverse());\n    const coords = projection.invert([x, y]);\n    setGuessLoc(coords);\n  };\n  return (\n    <>\n      <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\"\n      style={{\n        maxHeight: \"450\"\n      }}>\n          <Geographies geography={geoUrl}>\n            {({ geographies, projection }) => {\n              return(\n                <g onClick={handleClick(projection)}>\n                {geographies.map(geo => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    fill=\"#ddd\"\n                    stroke=\"#aaa\"\n                    strokeWidth=\"0.5\"\n                    style={{\n                      default: { outline: \"none\" },\n                      hover: { outline: \"none\" },\n                      pressed: { outline: \"none\" },\n                    }}\n                  />\n                ))}\n                </g>\n              )\n            }}\n          </Geographies>\n          <Marker\n            coordinates={guessLoc}\n          >\n\n            <g\n              fill=\"none\"\n              stroke=\"#FF5533\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              transform=\"translate(-12, -24)\"\n            >\n              <circle cx=\"12\" cy=\"10\" r=\"3\" />\n              <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\n            </g>\n          </Marker>\n          {showCity ? (\n            <>\n              <Marker\n                coordinates={curCityLoc}\n              >\n                <circle r={3} fill=\"#0079d3\" stroke=\"#000\" strokeWidth={0.1} />\n              </Marker>\n            </>\n          ) : (\n            null\n          )}\n      </ComposableMap>\n    </>\n  );\n};\n\nexport default memo(MapChart);\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Link } from \"react-router-dom\";\n\n\nimport \"./App.css\";\n\nimport MapChart from \"./MapChart\";\n\nimport hundredkpluscities from \"./hundredkpluscities\"\n\nexport default class StandardMode extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      content: \"\",\n      cities: [],\n      guessLoc: [-98.6, 39.8],\n      step: 1,\n      showCity: false,\n      curCityLoc: [],\n      curCityName: \"\",\n      curCityNum: 0,\n      roundOver: false,\n      rounds: [],\n      score: 0,\n      gameOver: false\n    }\n  }\n\n  calcDistance(city, guess) {\n    const R = 6371e3; // metres\n    const p1 = city[1] * Math.PI/180; // φ, λ in radians\n    const p2 = guess[1] * Math.PI/180;\n    const dp = (guess[1]-city[1]) * Math.PI/180;\n    const dl = (guess[0]-city[0]) * Math.PI/180;\n\n    const a = Math.sin(dp/2) * Math.sin(dp/2) +\n              Math.cos(p1) * Math.cos(p2) *\n              Math.sin(dl/2) * Math.sin(dl/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    const d = R * c; // in metres\n    return Math.floor(d)/1000;\n  }\n\n  getRandom(arr, n) {\n    var result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        var x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n}\n\n  componentDidMount() {\n    let cList = this.getRandom(hundredkpluscities, 10)\n    this.setState({\n      cities: cList,\n      curCityLoc: [cList[0].LONGITUDE, cList[0].LATITUDE],\n      curCityName: cList[0].CITY + \", \" + cList[0].STATE_CODE\n    })\n    console.log(cList)\n  }\n\n  setGuessLoc = loc => {\n    this.setState({\n      guessLoc: loc\n    })\n  }\n\n  submit() {\n    let dist = Math.round(this.calcDistance(this.state.guessLoc, this.state.curCityLoc))\n    if (this.state.curCityName.endsWith(\"AK\")) {\n      dist = Math.round(dist * 0.35)\n    }\n    let roundInfo = {\n      num: this.state.curCityNum,\n      city: this.state.curCityName,\n      guess: this.state.guessLoc,\n      cityLoc: this.state.curCityLoc,\n      distance: dist\n    }\n    const newRounds = this.state.rounds.concat(roundInfo)\n    this.setState({\n      roundOver: true,\n      showCity: true,\n      curCityName: dist + \" km\",\n      score: this.state.score + dist,\n      rounds: newRounds\n    })\n  }\n\n  nextRound() {\n    if (this.state.curCityNum === 9) {\n      this.setState({\n        curCityName: \"Game over. Final distance: \"+this.state.score+ \" km\",\n        gameOver: true\n      })\n    }\n    else {\n      let curNum = this.state.curCityNum + 1\n      this.setState({\n        curCityNum: curNum,\n        curCityLoc: [this.state.cities[curNum].LONGITUDE, this.state.cities[curNum].LATITUDE],\n        curCityName: this.state.cities[curNum].CITY + \", \" + this.state.cities[curNum].STATE_CODE,\n        roundOver: false,\n        showCity: false\n      })\n    }\n  }\n\n  playAgain() {\n    let cList = this.getRandom(hundredkpluscities, 10)\n    this.setState({\n      cities: cList,\n      curCityNum: 0,\n      curCityLoc: [cList[0].LONGITUDE, cList[0].LATITUDE],\n      curCityName: cList[0].CITY + \", \" + cList[0].STATE_CODE,\n      showCity: false,\n      roundOver: false,\n      rounds: [],\n      score: 0,\n      gameOver: false\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"base\">\n        {this.state.gameOver ? (\n          <div className=\"container\">\n            <Link style={{ textDecoration: 'none' }} to=\"/cityfinder\">\n              <button>Back</button>\n            </Link>\n            <h5>Final Score: {this.state.score} km</h5>\n            <button onClick={() => this.playAgain()}>Play Again</button>\n            <div className=\"resultsList\">\n              {this.state.rounds.map(round => (\n                <div key={round.num}\n                className=\"roundEntry\"\n                onClick={() => this.setState({\n                  curCityLoc: round.cityLoc,\n                  guessLoc: round.guess,\n                })}\n                >\n                  <h5>{round.city}</h5>\n                  <h5>{round.distance} km</h5>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"container\">\n            <Link style={{ textDecoration: 'none' }} to=\"/cityfinder\">\n              <button>Back</button>\n            </Link>\n            <h1>Standard Mode</h1>\n            <p>Try to minimize your total distance over ten rounds.</p>\n            <h3>\n              Round {this.state.curCityNum+1}: {this.state.curCityName}\n              <br></br>\n              <hr></hr>\n              Total distance: {this.state.score} km\n            </h3>\n            {this.state.roundOver ? (\n              <>\n                <button onClick={() => this.nextRound()}>Next</button>\n              </>\n            ) : (\n              <>\n                <button onClick={() => this.submit()}>Submit</button>\n              </>\n            )}\n          </div>\n        )}\n        <div className=\"map\">\n          <MapChart mode=\"states\" setGuessLoc={this.setGuessLoc} showCity={this.state.showCity} curCityLoc={this.state.curCityLoc} guessLoc={this.state.guessLoc} setTooltipContent={this.setContent} />\n          <ReactTooltip>{this.state.content}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport MapChart from \"./MapChart\";\n\nimport hundredkpluscities from \"./hundredkpluscities\"\nimport levels from \"./levels\"\n\nexport default class SurvivalMode extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      content: \"\",\n      cities: [],\n      guessLoc: [-98.6, 39.8],\n      step: 1,\n      showCity: false,\n      curCityLoc: [],\n      curCityName: \"\",\n      curCityNum: 0,\n      curCityID: 0,\n      roundOver: false,\n      rounds: [],\n      score: 0,\n      gameOver: false,\n      lives: 5,\n      level: levels[0],\n    }\n  }\n\n  calcDistance(city, guess) {\n    const R = 6371e3; // metres\n    const p1 = city[1] * Math.PI/180; // φ, λ in radians\n    const p2 = guess[1] * Math.PI/180;\n    const dp = (guess[1]-city[1]) * Math.PI/180;\n    const dl = (guess[0]-city[0]) * Math.PI/180;\n\n    const a = Math.sin(dp/2) * Math.sin(dp/2) +\n              Math.cos(p1) * Math.cos(p2) *\n              Math.sin(dl/2) * Math.sin(dl/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    const d = R * c; // in metres\n    return Math.floor(d)/1000;\n  }\n\n  getRandom(arr, n) {\n    var result = new Array(n),\n        len = arr.length,\n        taken = new Array(len);\n    if (n > len)\n        throw new RangeError(\"getRandom: more elements taken than available\");\n    while (n--) {\n        var x = Math.floor(Math.random() * len);\n        result[n] = arr[x in taken ? taken[x] : x];\n        taken[x] = --len in taken ? taken[len] : len;\n    }\n    return result;\n}\n\n  componentDidMount() {\n    let city = hundredkpluscities[Math.floor(Math.random() * hundredkpluscities.length)];\n    this.setState({\n      cities: hundredkpluscities,\n      curCityLoc: [city.LONGITUDE, city.LATITUDE],\n      curCityName: \"Find: \"+city.CITY + \", \" + city.STATE_CODE,\n      curCityID: city.ID\n    })\n  }\n\n  setGuessLoc = loc => {\n    this.setState({\n      guessLoc: loc\n    })\n  }\n\n  submit() {\n    let dist = Math.round(this.calcDistance(this.state.guessLoc, this.state.curCityLoc))\n    if (this.state.curCityName.endsWith(\"AK\")) {\n      dist = Math.round(dist * 0.35)\n    }\n    if (dist < this.state.level.bonusThreshold) {\n      let roundInfo = {\n        num: this.state.curCityNum,\n        city: this.state.curCityName,\n        guess: this.state.guessLoc,\n        cityLoc: this.state.curCityLoc,\n        distance: dist,\n        success: true\n      }\n      const newRounds = this.state.rounds.concat(roundInfo)\n      this.setState({\n        roundOver: true,\n        showCity: true,\n        curCityName: dist + \" km. Amazing! +1 life.\",\n        score: this.state.score + 1,\n        lives: this.state.lives + 1,\n        rounds: newRounds,\n        cities: this.state.cities.filter(c => c.ID !== this.state.curCityID)\n      })\n    }\n    else if (dist < this.state.level.threshold) {\n      let roundInfo = {\n        num: this.state.curCityNum,\n        city: this.state.curCityName,\n        guess: this.state.guessLoc,\n        cityLoc: this.state.curCityLoc,\n        distance: dist,\n        success: true\n      }\n      const newRounds = this.state.rounds.concat(roundInfo)\n      this.setState({\n        roundOver: true,\n        showCity: true,\n        curCityName: dist + \" km. Good job!\",\n        score: this.state.score + 1,\n        rounds: newRounds,\n        cities: this.state.cities.filter(c => c.ID !== this.state.curCityID)\n      })\n    }\n    else {\n      let roundInfo = {\n        num: this.state.curCityNum,\n        city: this.state.curCityName,\n        guess: this.state.guessLoc,\n        cityLoc: this.state.curCityLoc,\n        distance: dist,\n        success: false\n      }\n      const newRounds = this.state.rounds.concat(roundInfo)\n      this.setState({\n        roundOver: true,\n        showCity: true,\n        curCityName: dist + \" km. Too far. You lost a life.\",\n        lives: this.state.lives - 1,\n        rounds: newRounds,\n        cities: this.state.cities.filter(c => c.ID !== this.state.curCityID)\n      })\n    }\n\n  }\n\n  nextRound() {\n    if (this.state.lives === 0) {\n      this.setState({\n        curCityName: \"Game over. Final score: \"+this.state.score,\n        gameOver: true,\n        level: levels[0]\n      })\n    }\n    else {\n      let city = this.state.cities[Math.floor(Math.random() * this.state.cities.length)];\n      this.setState({\n        curCity: city,\n        curCityLoc: [city.LONGITUDE, city.LATITUDE],\n        curCityName: \"Find: \"+city.CITY + \", \" + city.STATE_CODE,\n        curCityID: city.ID,\n        roundOver: false,\n        showCity: false\n      })\n      if (this.state.score === this.state.level.scoreNeeded && this.state.level.number !== 5) {\n        this.setState({\n          level: levels[this.state.level.number]\n        })\n      }\n    }\n  }\n\n  playAgain() {\n    let city = hundredkpluscities[Math.floor(Math.random() * hundredkpluscities.length)];\n    this.setState({\n      cities: hundredkpluscities,\n      curCityLoc: [city.LONGITUDE, city.LATITUDE],\n      curCityName: city.CITY + \", \" + city.STATE_CODE,\n      curCityID: city.ID,\n      showCity: false,\n      roundOver: false,\n      rounds: [],\n      score: 0,\n      lives: 5,\n      level: levels[0],\n      gameOver: false\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"base\">\n        {this.state.gameOver ? (\n          <div className=\"container\">\n            <Link style={{ textDecoration: 'none' }} to=\"/cityfinder\">\n              <button>Back</button>\n            </Link>\n            <h5>Final Score: {this.state.score}</h5>\n            <h5>Level: {this.state.level.number}</h5>\n            <button onClick={() => this.playAgain()}>Play Again</button>\n            <div className=\"resultsList\">\n              {this.state.rounds.map(round => (\n                <div key={round.num}\n                className=\"roundEntry\"\n                onClick={() => this.setState({\n                  curCityLoc: round.cityLoc,\n                  guessLoc: round.guess,\n                })}\n                >\n                  <h5>{round.city}</h5>\n                  {round.success ? (\n                    <>\n                      <h5>Success - {round.distance} km</h5>\n                    </>\n                  ) : (\n                    <>\n                      <h5>Failure - {round.distance} km</h5>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"container\">\n            <Link style={{ textDecoration: 'none' }} to=\"/cityfinder\">\n              <button>Back</button>\n            </Link>\n            <h1>Survival Mode</h1>\n            <p>Try to guess as many cities as possible before you run out of lives.</p>\n            <h2>Level: {this.state.level.number}</h2>\n            <p>{this.state.level.description}</p>\n            {this.state.level.bonusAllowed ? (\n              <h3>\n                Score: {this.state.score}\n                <br></br>\n                Lives: {this.state.lives}\n                <br></br>\n                <hr></hr>\n                {this.state.curCityName}\n                <br></br>\n                <hr></hr>\n                Distance required: Within {this.state.level.threshold} km\n                <br></br>\n                Bonus if within {this.state.level.bonusThreshold} km\n              </h3>\n            ) : (\n              <h3>\n                Score: {this.state.score}\n                <br></br>\n                Lives: {this.state.lives}\n                <br></br>\n                <hr></hr>\n                {this.state.curCityName}\n                <br></br>\n                Distance required: Within {this.state.level.threshold} km\n              </h3>\n            )}\n\n            {this.state.roundOver ? (\n              <>\n                <button onClick={() => this.nextRound()}>Next</button>\n              </>\n            ) : (\n              <>\n                <button onClick={() => this.submit()}>Submit</button>\n              </>\n            )}\n          </div>\n        )}\n        <div className=\"map\">\n          <MapChart mode={this.state.level.map} setGuessLoc={this.setGuessLoc} showCity={this.state.showCity} curCityLoc={this.state.curCityLoc} guessLoc={this.state.guessLoc} setTooltipContent={this.setContent} />\n          <ReactTooltip>{this.state.content}</ReactTooltip>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./Home.css\"\n\nexport default function Home() {\n  return (\n    <div className=\"main\">\n      <Link style={{textDecoration: 'none'}} to=\"/cityfinder/standard\">\n        <div className=\"card\">\n          <div className=\"infobox\">\n            <h4><b>Standard Mode</b></h4>\n            <p>Try to minimize your total distance over ten rounds.</p>\n          </div>\n        </div>\n      </Link>\n      <Link style={{textDecoration: 'none'}} to=\"/cityfinder/survival\">\n        <div className=\"card\">\n          <div className=\"infobox\">\n            <h4><b>Survival Mode</b></h4>\n            <p>Try to guess as many cities as possible before you run out of lives.</p>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./Header.css\"\n\nexport default function Header() {\n  return (\n    <div className=\"header\">\n      <h2>City Finder</h2>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport StandardMode from \"./StandardMode\"\nimport SurvivalMode from \"./SurvivalMode\"\nimport Home from \"./Home\"\nimport Header from \"./Header\"\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path=\"/cityfinder\" component={Home} />\n          <Route exact path=\"/cityfinder/survival\" component={SurvivalMode} />\n          <Route path=\"/cityfinder/standard\" component={StandardMode} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}